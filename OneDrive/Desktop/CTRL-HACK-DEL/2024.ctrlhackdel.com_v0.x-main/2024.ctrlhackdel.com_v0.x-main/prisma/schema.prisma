// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String         @id @default(uuid())
  name          String?
  imageUrl      String?
  email         String?        @unique
  password      String?
  emailVerified DateTime?
  role          Role?
  customAvatar  CustomAvatar?
  hackerProfile HackerProfile? // Only if the user is a hacker
  Account       Account[]
}

model HackerProfile {
  id                  String             @id @default(uuid())
  userId              String             @unique
  user                User               @relation(fields: [userId], references: [id])
  university          String
  year                String
  dietaryRestrictions String
  shirtSize           ShirtSize
  resumeUrl           String
  registrationStatus  RegistrationStatus
  responses           Response[]
}

model CustomAvatar {
  id           String @id @default(uuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id])
  hairColour   String
  skinColour   String
  topColour    String
  bottomColour String
}

model Response {
  id            String        @id @default(uuid())
  profileId     String
  hackerProfile HackerProfile @relation(fields: [profileId], references: [id])
  question      String
  answer        String? // Some questions may be optional

  @@index([profileId])
}

enum RegistrationStatus {
  APPLIED
  ACCEPTED
  REJECTED
  WAITLISTED
}

enum Role {
  HACKER
  ADMIN
  SPONSOR
}

enum ShirtSize {
  XS
  S
  M
  L
  XL
  XXL
}
